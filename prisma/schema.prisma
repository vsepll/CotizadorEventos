generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                  @id @default(cuid())
  name                   String?
  email                  String                  @unique
  password               String
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @default(now()) @updatedAt
  role                   UserRole                @default(USER)
  customOperationalCosts CustomOperationalCost[]
  quotations             Quotation[]
  employeeTypes          EmployeeType[]
}

model GlobalParameters {
  id                           Int   @id @default(1)
  defaultPlatformFee           Float
  defaultTicketingFee          Float
  defaultAdditionalServicesFee Float @default(0)
  defaultCreditCardFee         Float
  defaultDebitCardFee          Float
  defaultCashFee               Float
  defaultCredentialsCost       Float
  defaultSupervisorsCost       Float
  defaultOperatorsCost         Float
  defaultMobilityCost          Float
  palco4FeePerTicket           Float
  lineCostPercentage           Float
  ticketingCostPerTicket       Float
  fuelCostPerLiter             Float @default(0)
  kmPerLiter                   Float @default(10)
  monthlyFixedCosts            Float @default(0)
  /**
   * Definiciones globales de costos operativos personalizados cargadas desde un Excel.
   * Se almacena un array JSON con objetos del tipo:
   * { name: String, baseAmount: Float, calculationType: String }
   */
  customOperationalCosts      Json?

  /**
   * Definiciones globales de servicios adicionales personalizados cargadas desde un Excel.
   * Se almacena un array JSON con objetos del tipo:
   * { name: String, baseAmount: Float, isPercentage: Boolean }
   */
  customAdditionalServices    Json?
}

model Quotation {
  id                 String                @id @default(cuid())
  name               String
  eventType          String
  totalAmount        Float
  ticketPrice        Float
  platformFee        Float
  additionalServices Float
  paywayFees         Json
  palco4Cost         Float
  lineCost           Float
  operationalCosts   Json
  totalRevenue       Float
  totalCosts         Float
  grossMargin        Float
  grossProfitability Float
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  userId             String
  ticketingFee       Float
  estimatedPaymentDate DateTime?
  paymentStatus      String                @default("PENDING")
  status             QuotationStatus       @default(DRAFT)
  user               User                  @relation(fields: [userId], references: [id])
  customCosts        QuotationCustomCost[]
  ticketSectors      TicketSector[]
  additionalServiceItems QuotationAdditionalService[]
}

model TicketVariation {
  id       String       @id @default(cuid())
  name     String
  price    Float
  quantity Int
  sectorId String
  sector   TicketSector @relation(fields: [sectorId], references: [id], onDelete: Cascade)
}

model TicketSector {
  id             String            @id @default(cuid())
  name           String
  quotationId    String
  quotation      Quotation         @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  variations     TicketVariation[]
}

model GlobalCommission {
  id         String   @id @default(cuid())
  name       String
  percentage Float
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
}

model GlobalFixedExpense {
  id        String   @id @default(cuid())
  name      String
  amount    Float
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
}

model CustomOperationalCost {
  id             String                @id @default(cuid())
  name           String
  description    String?
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  userId         String
  user           User                  @relation(fields: [userId], references: [id])
  quotationCosts QuotationCustomCost[]
}

model QuotationCustomCost {
  id                      String                @id @default(cuid())
  amount                  Float
  quotationId             String
  customOperationalCostId String
  customOperationalCost   CustomOperationalCost @relation(fields: [customOperationalCostId], references: [id])
  quotation               Quotation             @relation(fields: [quotationId], references: [id], onDelete: Cascade)
}

model EmployeeType {
  id         String   @id @default(cuid())
  name       String
  isOperator Boolean  @default(true)
  costPerDay Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  createdBy  String
  user       User     @relation(fields: [createdBy], references: [id])
}

model QuotationAdditionalService {
  id            String    @id @default(cuid())
  name          String
  amount        Float
  isPercentage  Boolean   @default(false)
  quotationId   String
  quotation     Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
}

enum QuotationStatus {
  DRAFT
  REVIEW
  APPROVED
  REJECTED
}
